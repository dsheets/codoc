<!-- Type rendering -->
<t:seq>
  <t:let name="type"
         ><t:if exists=".parens">(<t:insert name="type" with=".parens"/>)</t:if>
    <t:if exists=".any">_</t:if>
    <t:if exists=".var">'<t:insert name=".var"/></t:if>
    <t:if exists=".alias">
      <!-- TODO: codoc should mark this with parens if they are necessary? -->
      (<t:insert name="type" with=".alias.type"/><t:seq> </t:seq>
      <t:let name="keyword.text">as</t:let><t:insert name="keyword"/>
      '<t:insert name=".alias.var"/>)
    </t:if>
    <t:if exists=".arrow"><t:insert name="type.mkarrow" with=".arrow"/></t:if>
    <t:if exists=".unit">()</t:if>
    <t:if exists=".tuple"><t:insert name="type.mktuple" with=".tuple"/></t:if>
    <t:if exists=".cons"
          ><t:let name="type.mkcons.cons"
          /><t:insert name="type.mkcons" with=".cons"/></t:if><!--
          TODO: this mkcons.cons stuff is insufficient - needs fix in blueprint
          -->
    <t:if exists=".variant.fixed"
          ><t:insert name="type.variant-fixed" with=".variant"/></t:if>
    <t:if exists=".variant.closed"
          ><t:if exists=".variant.open"
                 ><t:insert name="type.variant-clopen" with=".variant"
                 /></t:if
                 ><t:else><t:insert name="type.variant-closed" with=".variant"
                 /></t:else
                 ></t:if>
    <t:else
        ><t:if exists=".variant.open"
               ><t:insert name="type.variant-open" with=".variant"/></t:if
               ></t:else
   ><t:if exists=".object"
               ><t:insert name="type.mkobject" with=".object"/></t:if>
    <t:if exists=".poly"><t:insert name="type.mkpoly" with=".poly"/></t:if>
    <t:if exists=".class"
          ><t:let name="type.mkcons.cons">#</t:let
          ><t:insert name="type.mkcons" with=".class"/></t:if>
    <t:if exists=".package"
          ><t:insert name="type.mkpackage" with=".package"/></t:if>
  </t:let>

  <t:let name="type.mkarrow"
         ><t:insert name="type.labeled" with=".domain"
         /> -> <t:insert name="type" with=".range"
         /></t:let>

  <t:let name="type.labeled"
         ><t:if exists=".label"><t:insert name=".label"/>:</t:if
         ><t:if exists=".optional">?<t:insert name=".optional"/>:</t:if
         ><t:insert name="type" with=".type"/></t:let>

  <t:let name="type.mktuple"
         ><t:let name=".els">
    * <t:insert name="type" with=".head"
    /><t:insert name="type.mktuple.els" with=".tail"><t:seq/></t:insert
    ></t:let
    ><t:insert name="type" with=".head"
    /><t:insert name=".els" with=".tail"><t:seq/></t:insert
    ></t:let>

  <t:let name="type.mkcons"
         ><t:if exists=".args"
                ><t:if exists=".args.tail"
                       >(<t:insert name="type" with=".args.head"
                       /><t:insert name=".mkargs" with=".args.tail"
                       />) </t:if>
  <t:else><t:insert name="type" with=".args.head"/> </t:else
  ></t:if><t:insert name=".cons"><t:seq/></t:insert
  ><t:insert name="nav.path" with=".path"
  /></t:let>

  <t:let name="type.mkcons.mkargs"
         >, <t:insert name="type" with=".head"
         /><t:insert name="type.mkcons.mkargs"
         with=".tail"><t:seq/></t:insert></t:let>

  <t:let name="type.variant-fixed"
         >[ <t:insert name="type.mkvariant" with=".fixed"
         /> ]</t:let>

  <t:let name="type.variant-closed"
         >[&lt; <t:insert name="type.mkvariant" with=".closed"
         /> ]</t:let>

  <t:let name="type.variant-clopen"
         >[&lt; <t:insert name="type.mkvariant" with=".closed"
         /> &gt;<t:insert name=".tags" with=".open"/>]</t:let>

  <t:let name="type.variant-clopen.tags"
         > `<t:insert name=".head"
         /><t:insert name="type.clopen-variant.tags" with=".tail"
         ><t:seq/></t:insert></t:let>

  <t:let name="type.variant-open"
         >[&gt; <t:insert name="type.mkvariant" with=".open"
         /> ]</t:let>

  <t:let name="type.mkvariant">
    <t:insert name="type.mkvariant-cons" with=".head"/>
    <t:insert name="type.mkvariant" with=".tail"><t:seq/></t:insert>
  </t:let>

  <t:let name="type.mkvariant-cons">
    <t:let name=".rest">
      &amp; <t:insert name="type" with=".head"/>
      <t:insert name="type.mkvariant-cons.rest" with=".tail"><t:seq/></t:insert>
    </t:let>
    <div class="cons">
      |
      <t:insert name="type" with=".type"><t:seq/></t:insert>
      <t:if exists=".cons">
        `<t:insert name=".cons.name"/>
        <t:if exists=".cons.args.head">
          <t:let name="keyword.text">of</t:let><t:insert name="keyword"/>
          <t:if exists=".cons.empty">&amp;</t:if>
          <t:insert name="type" with=".cons.args.head"/>
          <t:insert name=".rest"
                    with=".cons.args.tail"><t:seq/></t:insert>
        </t:if>
      </t:if>
    </div>
  </t:let>

  <t:let name="type.mkobject"
         >&lt;
  <t:if exists=".methods.head">
    <t:insert name="type.mkmethod" with=".methods.head"
              /><t:insert name="type.mkmethods"
              with=".methods.tail"><t:seq/></t:insert
              ><t:if exists=".open">; ..</t:if>
  </t:if>
  <t:else><t:if exists=".open">..</t:if></t:else>
  &gt;</t:let>

  <t:let name="type.mkmethod"
         ><t:insert name=".name"/> : <t:insert name="type" with=".type"
         /></t:let>

  <t:let name="type.mkmethods"
         >; <t:insert name="type.mkmethod" with=".head"
         /><t:insert name="type.mkmethods" with=".tail"><t:seq/></t:insert
         ></t:let>
  
  <t:let name="type.mkpoly">
    <t:let name=".map">
      '<t:insert name=".head"/>
      <t:insert name="type.mkpoly.map" with=".tail"><t:seq/></t:insert>
    </t:let>
    <t:insert name=".map" with=".vars"/> . <t:insert name="type" with=".expr"/>
  </t:let>

  <t:let name="type.mkpackage">
    <t:let name=".mksub">
      <t:let name="keyword.text">type</t:let><t:insert name="keyword"/>
      <t:insert name="nav.path" with=".fragment"/>
      = <t:insert name="type" with=".type"
      /></t:let>
    <t:let name=".map">
      <t:seq/>
      <t:let name="keyword.text">and</t:let><t:insert name="keyword"/>
      <t:insert name="type.mkpackage.mksub" with=".head"
                /><t:insert name="type.mkpackage.map"
                with=".tail"><t:seq/></t:insert></t:let>
    (<t:let name="keyword.text">module</t:let><t:insert name="keyword"/>
    <t:insert name="nav.path" with=".path"
              /><t:if exists=".subs.head"><t:seq> </t:seq>
    <t:let name="keyword.text">with</t:let><t:insert name="keyword"/>
    <t:insert name=".mksub" with=".subs.head"
              /><t:insert name=".map" with=".subs.tail"><t:seq/></t:insert
              ></t:if>)
  </t:let>
</t:seq>
